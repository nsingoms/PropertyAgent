@inject IProperty PropertyService
<div class="col-md-3"><div class="card">

        @if (property.Photos.Count > 0)
        {
               @foreach(var photo in property.Photos)
            {    
         <img src="@photo.Url" class="card-img" height="300"  />
            }
        }
        else
        {
             <img src="/houseimg.jpg" class="card-img" height="300"/>
        }

    <div class="card-footer">
        <p>@property.Title</p>
        <p>@property.Description</p>
         <p>@property.Location</p>
         
         <AuthorizeView>
             <Authorized>
                 <div class="btn-group col-md-12">
                     <a class="btn btn-primary" href="@($"properties/edit/{property.Id}")">Edit</a>
                     <button class="btn btn-danger" @onclick="()=>DeleteProperty(property.Id)">Delete</button>
                 </div>
                   
             </Authorized>
             <NotAuthorized>
                  <div class="btn-group col-md-12">
                     <a class="btn btn-primary" href="@($"properties/{property.Id}")"> View Property</a>
                    
                 </div>
                   
             </NotAuthorized>
         </AuthorizeView>
         
       
    </div>
     
</div></div>

@code {
    [Parameter]
    public PropertyDto property { get; set; }
    
    // [Parameter]
    //public EventCallback<int> OnPropertyDelete { get; set; }
    
       private async Task DeleteProperty(int Id)
    {
        await PropertyService.DeletePropertyAsync(Id);
         
    }
    //private async Task PropertyDelete(MouseEventArgs e, int name)
    //{
    //    await OnPropertyDelete.InvokeAsync(name);
    //}

   
}
